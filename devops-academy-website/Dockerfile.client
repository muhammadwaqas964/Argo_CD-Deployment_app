# Dockerfile.client

# Stage 1: Build the frontend
FROM oven/bun:1.1.18-alpine AS frontend_builder

# Set working directory inside the container to /app
# This is the root of your project where package.json, vite.config.ts, tsconfig.json reside
WORKDIR /app

# Copy package.json and bun.lock for dependency installation
COPY package.json bun.lock ./

# Install dependencies
# Using --frozen-lockfile for consistent builds
RUN --mount=type=cache,target=/root/.bun/install/cache bun install --frozen-lockfile

# Copy project configuration files (vite.config.ts, tsconfig.json)
# These are at the root level of your project (devops-academy-website/)
COPY vite.config.ts tsconfig.json ./

# Copy the client application source code
# The client folder is copied into /app/client
COPY client ./client

# Build the frontend application
# Vite will run from /app and use vite.config.ts located at /app.
# Inside vite.config.ts, the 'root' is set to 'client', which will correctly point to /app/client as the source root.
RUN bunx vite build

# Stage 2: Serve the compiled frontend static files with Nginx
FROM nginx:alpine

# Remove default Nginx configuration (if you're providing your own)
RUN rm /etc/nginx/conf.d/default.conf

# Copy custom Nginx configuration
# IMPORTANT: You need an 'nginx.conf' file in your 'devops-academy-website' directory for this to work.
# If you don't have one, create a basic one (example provided below).
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the build output from the builder stage to Nginx's serving directory
# The output directory is '/app/dist/server/public' based on your vite.config.ts 'outDir' setting.
COPY --from=frontend_builder /app/dist/server/public /usr/share/nginx/html

# Expose port 80
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
